import { BaseLoginProvider } from '../entities/base-login-provider';
import { SocialUser } from '../entities/social-user';
export class VKLoginProvider extends BaseLoginProvider {
    constructor(clientId, initOptions = {
        fields: 'photo_max,contacts',
        version: '5.124',
    }) {
        super();
        this.clientId = clientId;
        this.initOptions = initOptions;
        this.VK_API_URL = '//vk.com/js/api/openapi.js';
        this.VK_API_GET_USER = 'users.get';
    }
    initialize() {
        return new Promise((resolve, reject) => {
            try {
                this.loadScript(VKLoginProvider.PROVIDER_ID, this.VK_API_URL, () => {
                    VK.init({
                        apiId: this.clientId,
                    });
                    resolve();
                });
            }
            catch (err) {
                reject(err);
            }
        });
    }
    getLoginStatus() {
        return new Promise((resolve, reject) => this.getLoginStatusInternal(resolve, reject));
    }
    signIn() {
        return new Promise((resolve, reject) => this.signInInternal(resolve, reject));
    }
    signOut() {
        return new Promise((resolve, reject) => {
            VK.Auth.logout((response) => {
                resolve();
            });
        });
    }
    signInInternal(resolve, reject) {
        VK.Auth.login((loginResponse) => {
            if (loginResponse.status === 'connected') {
                this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);
            }
        });
    }
    getUser(userId, token, resolve) {
        VK.Api.call(this.VK_API_GET_USER, {
            user_id: userId,
            fields: this.initOptions.fields,
            v: this.initOptions.version,
        }, (userResponse) => {
            resolve(this.createUser(Object.assign({}, { token }, userResponse.response[0])));
        });
    }
    getLoginStatusInternal(resolve, reject) {
        VK.Auth.getLoginStatus((loginResponse) => {
            if (loginResponse.status === 'connected') {
                this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);
            }
        });
    }
    createUser(response) {
        const user = new SocialUser();
        user.id = response.id;
        user.name = `${response.first_name} ${response.last_name}`;
        user.photoUrl = response.photo_max;
        user.authToken = response.token;
        return user;
    }
}
VKLoginProvider.PROVIDER_ID = 'VK';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmstbG9naW4tcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiL1ZvbHVtZXMvU291cmNlcy93b3Jrc3BhY2VzL2luZmlub3ZhZS1kYXNoYm9hcmQvcHJvamVjdHMvbGliL3NyYy8iLCJzb3VyY2VzIjpbInByb3ZpZGVycy92ay1sb2dpbi1wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNwRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFJckQsTUFBTSxPQUFPLGVBQWdCLFNBQVEsaUJBQWlCO0lBQ3BELFlBQ1UsUUFBZ0IsRUFDaEIsY0FBbUI7UUFDekIsTUFBTSxFQUFFLG9CQUFvQjtRQUM1QixPQUFPLEVBQUUsT0FBTztLQUNqQjtRQUVELEtBQUssRUFBRSxDQUFDO1FBTkEsYUFBUSxHQUFSLFFBQVEsQ0FBUTtRQUNoQixnQkFBVyxHQUFYLFdBQVcsQ0FHbEI7UUFPYyxlQUFVLEdBQUcsNEJBQTRCLENBQUM7UUFDMUMsb0JBQWUsR0FBRyxXQUFXLENBQUM7SUFML0MsQ0FBQztJQU9ELFVBQVU7UUFDUixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3JDLElBQUk7Z0JBQ0YsSUFBSSxDQUFDLFVBQVUsQ0FDYixlQUFlLENBQUMsV0FBVyxFQUMzQixJQUFJLENBQUMsVUFBVSxFQUNmLEdBQUcsRUFBRTtvQkFDSCxFQUFFLENBQUMsSUFBSSxDQUFDO3dCQUNOLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUTtxQkFDckIsQ0FBQyxDQUFDO29CQUVILE9BQU8sRUFBRSxDQUFDO2dCQUNaLENBQUMsQ0FDRixDQUFDO2FBQ0g7WUFBQyxPQUFPLEdBQUcsRUFBRTtnQkFDWixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDYjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGNBQWM7UUFDWixPQUFPLElBQUksT0FBTyxDQUFhLENBQUMsT0FBWSxFQUFFLE1BQVcsRUFBRSxFQUFFLENBQzNELElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQzdDLENBQUM7SUFDSixDQUFDO0lBRUQsTUFBTTtRQUNKLE9BQU8sSUFBSSxPQUFPLENBQWEsQ0FBQyxPQUFZLEVBQUUsTUFBVyxFQUFFLEVBQUUsQ0FDM0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQ3JDLENBQUM7SUFDSixDQUFDO0lBRUQsT0FBTztRQUNMLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDckMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFhLEVBQUUsRUFBRTtnQkFDL0IsT0FBTyxFQUFFLENBQUM7WUFDWixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLGNBQWMsQ0FBQyxPQUFZLEVBQUUsTUFBVztRQUM5QyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLGFBQWtCLEVBQUUsRUFBRTtZQUNuQyxJQUFJLGFBQWEsQ0FBQyxNQUFNLEtBQUssV0FBVyxFQUFFO2dCQUN4QyxJQUFJLENBQUMsT0FBTyxDQUNWLGFBQWEsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUN6QixhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFDekIsT0FBTyxDQUNSLENBQUM7YUFDSDtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLE9BQU8sQ0FBQyxNQUFXLEVBQUUsS0FBVSxFQUFFLE9BQVk7UUFDbkQsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQ1QsSUFBSSxDQUFDLGVBQWUsRUFDcEI7WUFDRSxPQUFPLEVBQUUsTUFBTTtZQUNmLE1BQU0sRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU07WUFDL0IsQ0FBQyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTztTQUM1QixFQUNELENBQUMsWUFBaUIsRUFBRSxFQUFFO1lBQ3BCLE9BQU8sQ0FDTCxJQUFJLENBQUMsVUFBVSxDQUNiLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUN2RCxDQUNGLENBQUM7UUFDSixDQUFDLENBQ0YsQ0FBQztJQUNKLENBQUM7SUFFTyxzQkFBc0IsQ0FBQyxPQUFZLEVBQUUsTUFBVztRQUN0RCxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLGFBQWtCLEVBQUUsRUFBRTtZQUM1QyxJQUFJLGFBQWEsQ0FBQyxNQUFNLEtBQUssV0FBVyxFQUFFO2dCQUN4QyxJQUFJLENBQUMsT0FBTyxDQUNWLGFBQWEsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUN6QixhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFDekIsT0FBTyxDQUNSLENBQUM7YUFDSDtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLFVBQVUsQ0FBQyxRQUFhO1FBQzlCLE1BQU0sSUFBSSxHQUFlLElBQUksVUFBVSxFQUFFLENBQUM7UUFDMUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxRQUFRLENBQUMsVUFBVSxJQUFJLFFBQVEsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUMzRCxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUM7UUFDbkMsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDO1FBQ2hDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7QUE5RnNCLDJCQUFXLEdBQVcsSUFBSSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZUxvZ2luUHJvdmlkZXIgfSBmcm9tICcuLi9lbnRpdGllcy9iYXNlLWxvZ2luLXByb3ZpZGVyJztcbmltcG9ydCB7IFNvY2lhbFVzZXIgfSBmcm9tICcuLi9lbnRpdGllcy9zb2NpYWwtdXNlcic7XG5cbmRlY2xhcmUgbGV0IFZLOiBhbnk7XG5cbmV4cG9ydCBjbGFzcyBWS0xvZ2luUHJvdmlkZXIgZXh0ZW5kcyBCYXNlTG9naW5Qcm92aWRlciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgY2xpZW50SWQ6IHN0cmluZyxcbiAgICBwcml2YXRlIGluaXRPcHRpb25zOiBhbnkgPSB7XG4gICAgICBmaWVsZHM6ICdwaG90b19tYXgsY29udGFjdHMnLFxuICAgICAgdmVyc2lvbjogJzUuMTI0JyxcbiAgICB9XG4gICkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFBST1ZJREVSX0lEOiBzdHJpbmcgPSAnVksnO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgVktfQVBJX1VSTCA9ICcvL3ZrLmNvbS9qcy9hcGkvb3BlbmFwaS5qcyc7XG4gIHByaXZhdGUgcmVhZG9ubHkgVktfQVBJX0dFVF9VU0VSID0gJ3VzZXJzLmdldCc7XG5cbiAgaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy5sb2FkU2NyaXB0KFxuICAgICAgICAgIFZLTG9naW5Qcm92aWRlci5QUk9WSURFUl9JRCxcbiAgICAgICAgICB0aGlzLlZLX0FQSV9VUkwsXG4gICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgVksuaW5pdCh7XG4gICAgICAgICAgICAgIGFwaUlkOiB0aGlzLmNsaWVudElkLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBnZXRMb2dpblN0YXR1cygpOiBQcm9taXNlPFNvY2lhbFVzZXI+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8U29jaWFsVXNlcj4oKHJlc29sdmU6IGFueSwgcmVqZWN0OiBhbnkpID0+XG4gICAgICB0aGlzLmdldExvZ2luU3RhdHVzSW50ZXJuYWwocmVzb2x2ZSwgcmVqZWN0KVxuICAgICk7XG4gIH1cblxuICBzaWduSW4oKTogUHJvbWlzZTxTb2NpYWxVc2VyPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPFNvY2lhbFVzZXI+KChyZXNvbHZlOiBhbnksIHJlamVjdDogYW55KSA9PlxuICAgICAgdGhpcy5zaWduSW5JbnRlcm5hbChyZXNvbHZlLCByZWplY3QpXG4gICAgKTtcbiAgfVxuXG4gIHNpZ25PdXQoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgVksuQXV0aC5sb2dvdXQoKHJlc3BvbnNlOiBhbnkpID0+IHtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHNpZ25JbkludGVybmFsKHJlc29sdmU6IGFueSwgcmVqZWN0OiBhbnkpIHtcbiAgICBWSy5BdXRoLmxvZ2luKChsb2dpblJlc3BvbnNlOiBhbnkpID0+IHtcbiAgICAgIGlmIChsb2dpblJlc3BvbnNlLnN0YXR1cyA9PT0gJ2Nvbm5lY3RlZCcpIHtcbiAgICAgICAgdGhpcy5nZXRVc2VyKFxuICAgICAgICAgIGxvZ2luUmVzcG9uc2Uuc2Vzc2lvbi5taWQsXG4gICAgICAgICAgbG9naW5SZXNwb25zZS5zZXNzaW9uLnNpZCxcbiAgICAgICAgICByZXNvbHZlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGdldFVzZXIodXNlcklkOiBhbnksIHRva2VuOiBhbnksIHJlc29sdmU6IGFueSkge1xuICAgIFZLLkFwaS5jYWxsKFxuICAgICAgdGhpcy5WS19BUElfR0VUX1VTRVIsXG4gICAgICB7XG4gICAgICAgIHVzZXJfaWQ6IHVzZXJJZCxcbiAgICAgICAgZmllbGRzOiB0aGlzLmluaXRPcHRpb25zLmZpZWxkcyxcbiAgICAgICAgdjogdGhpcy5pbml0T3B0aW9ucy52ZXJzaW9uLFxuICAgICAgfSxcbiAgICAgICh1c2VyUmVzcG9uc2U6IGFueSkgPT4ge1xuICAgICAgICByZXNvbHZlKFxuICAgICAgICAgIHRoaXMuY3JlYXRlVXNlcihcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oe30sIHsgdG9rZW4gfSwgdXNlclJlc3BvbnNlLnJlc3BvbnNlWzBdKVxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRMb2dpblN0YXR1c0ludGVybmFsKHJlc29sdmU6IGFueSwgcmVqZWN0OiBhbnkpIHtcbiAgICBWSy5BdXRoLmdldExvZ2luU3RhdHVzKChsb2dpblJlc3BvbnNlOiBhbnkpID0+IHtcbiAgICAgIGlmIChsb2dpblJlc3BvbnNlLnN0YXR1cyA9PT0gJ2Nvbm5lY3RlZCcpIHtcbiAgICAgICAgdGhpcy5nZXRVc2VyKFxuICAgICAgICAgIGxvZ2luUmVzcG9uc2Uuc2Vzc2lvbi5taWQsXG4gICAgICAgICAgbG9naW5SZXNwb25zZS5zZXNzaW9uLnNpZCxcbiAgICAgICAgICByZXNvbHZlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZVVzZXIocmVzcG9uc2U6IGFueSk6IFNvY2lhbFVzZXIge1xuICAgIGNvbnN0IHVzZXI6IFNvY2lhbFVzZXIgPSBuZXcgU29jaWFsVXNlcigpO1xuICAgIHVzZXIuaWQgPSByZXNwb25zZS5pZDtcbiAgICB1c2VyLm5hbWUgPSBgJHtyZXNwb25zZS5maXJzdF9uYW1lfSAke3Jlc3BvbnNlLmxhc3RfbmFtZX1gO1xuICAgIHVzZXIucGhvdG9VcmwgPSByZXNwb25zZS5waG90b19tYXg7XG4gICAgdXNlci5hdXRoVG9rZW4gPSByZXNwb25zZS50b2tlbjtcbiAgICByZXR1cm4gdXNlcjtcbiAgfVxufVxuIl19